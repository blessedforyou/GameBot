import random
import os
from datetime import timedelta, datetime
from aiogram import Bot, Dispatcher, executor, types
from dotenv import load_dotenv
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from setting import keyboard as kb
from setting import setting as st
import database as db

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TOKEN')


async def on_startup(_):
    await db.database_info()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(TOKEN)
dp = Dispatcher(bot)

# –°–ª–æ–≤–∞—Ä–∏
last_usage_dice = {}
last_usage_money = {}


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    button1 = InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç', url='https://t.me/SisiDevTestBot?startgroup=True')
    keyboard.add(button1)

    if message.chat.type == 'private':
        await message.answer("–°–∏—Å–∏–ë–æ—Ç - —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è —á–∞—Ç–æ–≤."
                             "\n–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –¥–æ–±–∞–≤–ª—è–π –º–µ–Ω—è –≤ –±–µ—Å–µ–¥—É!", reply_markup=kb.start_keyboard)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã, –≤–≤–æ–¥–∏ - /help")


@dp.message_handler(commands=['help'])
async def help_cmd(message: types.Message):
    if message.from_user.id not in st.admin:
        await message.answer("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
                             "/help - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–∞—Ö.\n"
                             "/dice - –±—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏.\n"
                             "/money - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç.\n"
                             "/size - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.\n"
                             "/pay - –ø–µ—Ä–µ–¥–∞—á–∞ –¥–µ–Ω–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. \n"
                             "/buy - –ø–æ–∫—É–ø–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∏–≥—Ä.")
    else:
        await message.answer("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
                             "/help - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–∞—Ö.\n"
                             "/dice - –±—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏.\n"
                             "/money - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç.\n"
                             "/size - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.\n"
                             "/pay - –ø–µ—Ä–µ–¥–∞—á–∞ –¥–µ–Ω–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n"
                             "/buy - –ø–æ–∫—É–ø–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫.\n\n"
                             "–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
                             "/set_money - –≤—ã–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n"
                             "<i>Arguments: ¬´ID¬ª ¬´VALUE¬ª </i>\n"
                             "/delete_user - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î.\n"
                             "<i>Arguments: ¬´ID¬ª </i>\n"
                             "/setting - –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–≥—Ä—ã –≤ –∫—Ä–æ–∫–æ–¥–∏–ª–∞.",
                             parse_mode='html')


@dp.message_handler(commands=['dice'])
async def dice(message: types.Message):
    if message.chat.type == 'private':
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö.")
        return

    time_to_free_dice = timedelta(hours=1)

    if message.from_user.id in last_usage_dice:
        time_since_last_use = datetime.now() - last_usage_dice[message.from_user.id]
        if time_since_last_use < time_to_free_dice:
            time_remaining = time_to_free_dice - time_since_last_use
            hours, remainder = divmod(time_remaining.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            await message.answer(f"<b>–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç</b>",
                                 parse_mode='html')
            return

    message_split = message.text.split()
    if len(message_split) < 2:
        await message.answer("–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.\n"
                             "<i>Arguments:  ¬´MONEY¬ª</i>",
                             parse_mode='html')
        return

    diller_dice = random.randint(1, 6) + random.randint(1, 6)
    player_dice = random.randint(1, 6) + random.randint(1, 6)

    try:
        bet = int(message_split[1])
        money_result = db.cursor.execute("SELECT money FROM money WHERE user_id = ?",
                                         (message.from_user.id,)).fetchone()[0]

        if len(message_split) == 2:
            if bet > money_result:
                await message.reply("–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å.")

            elif bet <= money_result:
                if diller_dice == player_dice:
                    await message.reply(f'üé≤  –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ –∫–æ—Å—Ç–µ–π.\n\n'
                                        f'–ë–æ—Ç - {diller_dice}\n'
                                        f'–ò–≥—Ä–æ–∫ - {player_dice}\n'
                                        f'\n–ù–∏—á—å—è!')

                elif diller_dice > player_dice:
                    last_usage_dice[message.from_user.id] = datetime.now()
                    money_with_win_bet = money_result - bet
                    db.cursor.execute("UPDATE money SET money = ? WHERE user_id = ?",
                                      (money_with_win_bet, message.from_user.id))

                    await message.answer(f"üé≤ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—Ä–æ—Å–∫–∞ –∫–æ—Å—Ç–µ–π</b>:\n\n"
                                         f"<i>–°—Ç–∞–≤–∫–∞</i> - {bet} –º–æ–Ω–µ—Ç.\n"
                                         f"<i>–í–∞—à –±—Ä–æ—Å–æ–∫</i> - {player_dice}.\n"
                                         f"<i>–ë—Ä–æ—Å–æ–∫ –±–æ—Ç–∞</i> - {diller_dice}.\n\n"
                                         f"<b>–ü–æ–±–µ–¥–∏–ª –±–æ—Ç</b>\n"
                                         f"<i>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å</i>  - {money_with_win_bet}",
                                         parse_mode="HTML")
                    db.conn.commit()

                elif diller_dice < player_dice:
                    last_usage_dice[message.from_user.id] = datetime.now()
                    money_with_lose_bet = money_result + bet
                    db.cursor.execute("UPDATE money SET money = ? WHERE user_id = ?",
                                      (money_with_lose_bet, message.from_user.id))

                    await message.answer(f"üé≤ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—Ä–æ—Å–∫–∞ –∫–æ—Å—Ç–µ–π</b>:\n\n"
                                         f"<i>–°—Ç–∞–≤–∫–∞</i> - {bet} –º–æ–Ω–µ—Ç.\n"
                                         f"<i>–í–∞—à –±—Ä–æ—Å–æ–∫</i> - {player_dice}.\n"
                                         f"<i>–ë—Ä–æ—Å–æ–∫ –±–æ—Ç–∞</i> - {diller_dice}.\n\n"
                                         f"<b>–í—ã –ø–æ–±–µ–¥–∏–ª–∏!</b>\n"
                                         f"<i>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å</i>  - {money_with_lose_bet}",
                                         parse_mode='html')
                    db.conn.commit()

    except TypeError or ValueError:
        if TypeError:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
        elif ValueError:
            await message.answer("–í—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ –≤–∏–¥–µ —Å—É–º–º—ã.")


@dp.message_handler(commands=['money'])
async def money(message: types.Message):
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —á–∞—Ç—ã.
    if message.chat.type == 'private':
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö.")
        return

    time_to_free_money = timedelta(hours=6)

    if message.from_user.id in last_usage_money:
        time_since_last_use = datetime.now() - last_usage_money[message.from_user.id]
        if time_since_last_use < time_to_free_money:
            time_remaining = time_to_free_money - time_since_last_use
            hours, remainder = divmod(time_remaining.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            await message.answer(f"<b>–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ "
                                 f"—á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç</b>",
                                 parse_mode='html')
            return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —é–∑–µ—Ä–∞ –≤ –ë–î.
    await db.add_user(message.from_user.id, message.from_user.username, 0, 0, 0)

    result = db.cursor.execute('SELECT money FROM money WHERE user_id = ?',
                               (message.from_user.id,)).fetchone()[0]

    random_money = random.randint(1600, 2200)
    new_money = result + random_money

    if random_money in [61, 71]:
        await message.answer(f"üë§<b>{message.from_user.first_name}</b>, —Ç–µ–±–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å "
                             f"<i>{random_money} –º–æ–Ω–µ—Ç—É</i>."
                             f"\nüí∞<b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å</b>: <i>{new_money} –º–æ–Ω–µ—Ç</i>", parse_mode='HTML')

    elif random_money in [60, 65, 66, 67, 68, 69, 70, 75, 76, 77, 78, 79, 80]:
        await message.answer(f"üë§<b>{message.from_user.first_name}</b>, —Ç–µ–±–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å "
                             f"<i>{random_money} –º–æ–Ω–µ—Ç</i>."
                             f"\nüí∞<b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å</b>: <i>{new_money} –º–æ–Ω–µ—Ç</i>", parse_mode='HTML')

    else:
        await message.answer(f"üë§<b>{message.from_user.first_name}</b>, —Ç–µ–±–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å "
                             f"<i>{random_money} –º–æ–Ω–µ—Ç—ã</i>."
                             f"\nüí∞<b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å</b>: <i>{new_money} –º–æ–Ω–µ—Ç</i>", parse_mode='HTML')

    db.cursor.execute("UPDATE money SET money = ? WHERE user_id = ?", (new_money, message.from_user.id))
    db.conn.commit()

    last_usage_money[message.from_user.id] = datetime.now()


@dp.message_handler(commands=['buy'])
async def buy(message: types.Message):
    # –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
    price = 250

    try:

        result_money = db.cursor.execute("SELECT money FROM money WHERE user_id = ?",
                                         (message.from_user.id,)).fetchone()[0]
        result_buy_attempts = db.cursor.execute("SELECT buy_attempts FROM money WHERE user_id = ?",
                                                (message.from_user.id,)).fetchone()[0]

        if result_money >= price:

            new_attempts = result_buy_attempts + 1
            new_money = result_money - price

            await message.answer(f"<b> {message.from_user.first_name}</b>, "
                                 f"–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ."
                                 f"\n<b> –ë–∞–ª–∞–Ω—Å</b>: {new_money} –º–æ–Ω–µ—Ç.", parse_mode='HTML')
            db.cursor.execute("UPDATE money SET money = ?, buy_attempts = ? WHERE user_id = ?",
                              (new_money, new_attempts, message.from_user.id))
            db.conn.commit()

        elif result_money < price:
            await message.answer(f"<b> {message.from_user.first_name}</b>, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç."
                                 f"\n<b> –ë–∞–ª–∞–Ω—Å</b>: {result_money} –º–æ–Ω–µ—Ç."
                                 f"\n<b> –°—Ç–æ–∏–º–æ—Å—Ç—å</b>: {price} –º–æ–Ω–µ—Ç.", parse_mode="HTML")
    except TypeError as e:
        await message.answer(f"{e}")


@dp.message_handler(commands=['pay'])
async def pay(message: types.Message):
    if message.chat.type == 'private':
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö.")
        return

    split_message = message.text.split()

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ < 3: Error: /pay 1; Correct: /pay <Username> <Money>
    if len(split_message) < 3:
        await bot.send_message(message.chat.id,
                               f"{message.from_user.first_name}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–≤–Ω–æ 3-—ë–º.\n\n"
                               f"<i>Arguments:  ¬´USERNAME¬ª  ¬´MONEY¬ª</i>",
                               parse_mode='html')
        return

    try:
        transfer_to_user = str(split_message[1])
        transfer_amount = int(split_message[2])
        name_user_use_command = db.cursor.execute("SELECT username FROM money WHERE user_id = ?",
                                                  (message.from_user.id,)).fetchone()[0]

        if transfer_to_user == name_user_use_command:
            await message.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å–∞–º–æ–º—É —Å–µ–±–µ.")
            return

        result_money = db.cursor.execute("SELECT money FROM money WHERE user_id = ?",
                                         (message.from_user.id,)).fetchone()

        result_money = result_money[0]

        if transfer_amount > result_money:
            await message.answer(f"{message.from_user.first_name}, —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å.")
            return

        receiver_money = db.cursor.execute("SELECT money FROM money WHERE username = ?", (transfer_to_user,)).fetchone()
        if receiver_money is None:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        receiver_money = receiver_money[0]

        new_sender_balance = result_money - transfer_amount
        new_receiver_balance = transfer_amount + receiver_money
        db.cursor.execute("UPDATE money SET money = ? WHERE user_id = ?", (new_sender_balance, message.from_user.id))
        db.cursor.execute("UPDATE money SET money = ? WHERE username = ?", (new_receiver_balance, transfer_to_user))
        db.conn.commit()

        await bot.send_message(message.chat.id,
                               f"<b>{message.from_user.first_name}</b>, –ø–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω."
                               f"\n<b>–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å</b>: <i>{new_sender_balance} –º–æ–Ω–µ—Ç</i>."
                               f"\n<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è</b>: <i>{new_receiver_balance} –º–æ–Ω–µ—Ç</i>.",
                               parse_mode='html')

    except TypeError or ValueError:
        if TypeError:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
        elif ValueError:
            await message.answer("–ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∏–ø–∞ STRING, –≤—Ç–æ—Ä–æ–π INTEGER.")


@dp.message_handler(commands=['size'])
async def show_size(message: types.Message):
    if message.chat.type == 'private':
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö.")
        return

    last_usage_size = {}
    time_to_free_size = timedelta(hours=6)

    if message.from_user.id in last_usage_size:
        time_since_last_use = datetime.now() - last_usage_size[message.from_user.id]
        if time_since_last_use < time_to_free_size:
            time_remaining = time_to_free_size - time_since_last_use
            hours, remainder = divmod(time_remaining.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            await message.answer(f"<b>–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç</b>",
                                 parse_mode='html')
            return

    try:
        result_size = db.cursor.execute("SELECT size FROM money WHERE user_id = ?",
                                        (message.from_user.id,)).fetchone()[0]
        result_buy_attempts = db.cursor.execute("SELECT buy_attempts FROM money WHERE user_id = ?",
                                                (message.from_user.id,)).fetchone()[0]

        random_size = random.randint(-2, 12)
        new_size = result_size + random_size

        if result_buy_attempts >= 1:
            new_buy_attempts = result_buy_attempts - 1

            if random_size < 0:
                await message.answer(f"üë§ <b>{message.from_user.first_name}</b>, —Ä–∞–∑–º–µ—Ä —Ç–≤–æ–∏—Ö (üçí)(üçí) "
                                     f"—É–º–µ–Ω—å—à–∏–ª—Å—è –Ω–∞ {random_size}"
                                     f"\nüçí <b>–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä</b>: {new_size} —Å–º.", parse_mode='HTML')
            elif random_size > 0:
                await message.answer(f"üë§ <b>{message.from_user.first_name}</b>, —Ä–∞–∑–º–µ—Ä —Ç–≤–æ–∏—Ö (üçí)(üçí) "
                                     f"—É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ {random_size} —Å–º."
                                     f"\nüçí <b>–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä</b>: {new_size} —Å–º.", parse_mode="HTML")
            elif random_size == 0:
                await message.answer(f"üë§ <b>{message.from_user.first_name}</b>, "
                                     f"—Ä–∞–∑–º–µ—Ä —Ç–≤–æ–∏—Ö (üçí)(üçí) –æ—Å—Ç–∞–ª—Å—è –ø—Ä–µ–∂–Ω–∏–º.",
                                     parse_mode="HTML")

            db.cursor.execute("UPDATE money SET size = ? WHERE user_id = ?", (new_size, message.from_user.id))
            db.cursor.execute("UPDATE money SET buy_attempts = ? WHERE user_id = ?",
                              (new_buy_attempts, message.from_user.id))
            db.conn.commit()

        elif result_buy_attempts == 0:
            await message.answer(f"\n\n<i>{message.from_user.first_name}, –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –±—ã–ª–∏ –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω—ã</i>.",
                                 parse_mode="HTML")

    except TypeError:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")


@dp.message_handler(commands=['delete_user'])
async def delete_user(message: types.Message):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–∏—à–µ—Ç—Å—è –≤ –õ–°.
    if message.chat.type == 'private':
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö!")
        return

    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    id_in_database = []
    # –í—ã–±–æ—Ä–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î.
    info_in_database = db.cursor.execute("SELECT * FROM money").fetchall()

    # –ü–µ—Ä–µ–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –ë–î, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ID –≤ —Å–ø–∏—Å–æ–∫.
    for row in info_in_database:
        id_in_database.append(row[0])

    # –†–∞–∑–±–∏–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏
    message_split = message.text.split()
    if len(message_split) < 2:
        await message.answer("–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        message_id = int(message_split[1])
        if message.from_user.username == 'blessedforuu':
            if message_id not in id_in_database:
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
            else:
                db.cursor.execute("DELETE FROM money WHERE user_id = ?", (message_id,))
                db.conn.commit()
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î.")
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    except ValueError:
        await message.answer("–í—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∏–ø–∞ INTEGER.")


@dp.message_handler(commands=['info'])
async def info(message: types.Message):
    if message.chat.type == 'private':
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
        return

    try:
        money = db.cursor.execute("SELECT money FROM money WHERE user_id = ?", (message.from_user.id,)).fetchone()[0]
        size = db.cursor.execute("SELECT size FROM money WHERE user_id = ?", (message.from_user.id,)).fetchone()[0]
        all_user = db.cursor.execute("SELECT * FROM money").fetchall()

        info_user = {}

        for i in all_user:
            info_user[i[0]] = i[1]

        if message.from_user.id == 1264189868:
            await message.answer(f"[–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è]\n\n"
                                 f"–ò–º—è: {message.from_user.first_name}\n"
                                 f"–ë–∞–ª–∞–Ω—Å: {money}\n\n"
                                 f"[Information for Admin]\n\n"
                                 f"<span class='tg-spoiler'>{info_user}</span>",
                                 parse_mode='html')
        else:
            await message.answer(f"<b>[–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è]</b>\n\n"
                                 f"<b>–ò–º—è</b>: <i>{message.from_user.first_name}</i>\n"
                                 f"<b>–ú–æ–Ω–µ—Ç—ã</b>: <i>{money} –º–æ–Ω–µ—Ç</i>\n"
                                 f"<b>–†–∞–∑–º–µ—Ä</b>: <i>{size} —Å–º.</i>\n",
                                 parse_mode='html')

    except TypeError:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–∞–∑–µ –î–∞–Ω–Ω—ã—Ö.")


@dp.message_handler(commands=['set_money'])
async def set_money(message: types.Message):
    if message.chat.type == 'private':
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        return

    message_split = message.text.split()

    if len(message_split) < 3:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        name = str(message_split[1])
        give_money = int(message_split[2])

        name_in_database = []
        for user in db.cursor.execute("SELECT * FROM money").fetchall():
            name_in_database.append(user[1])

        if message.from_user.id == 1264189868:
            if name not in name_in_database:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
            else:
                db.cursor.execute("UPDATE money SET money = ? WHERE username = ?", (give_money, name))
                db.conn.commit()
                await message.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name} –∏–∑–º–µ–Ω—ë–Ω.")
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")

    except ValueError:
        await message.answer("<<Username>> <<Amount>>")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
